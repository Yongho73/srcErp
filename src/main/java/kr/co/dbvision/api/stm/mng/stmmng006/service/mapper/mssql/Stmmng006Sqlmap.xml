<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.dbvision.api.stm.mng.stmmng006.service.mapper.Stmmng006Mapper">

    <select id="selectUser" parameterType="egovMapForNull" resultType="egovMapForNull">
        /* kr.co.dbvision.api.stm.mng.stmmng006.service.impl.Stmmng006Mapper.selectUser */
        SELECT USER_ID,
               A.EMPNO,
               USER_NM,
               USER_IP,
               EMPL_AT,
               A.USE_AT,
               C.DEPT_KOR_NM AS DEPT_NM,
               CASE WHEN A.USE_AT ='1' THEN '사용중' ELSE '중지' END USE_AT_NM,
               (
               SELECT CAST(STUFF((
				SELECT ','+SC.ROLE_NM
				FROM STM_ROLEUSER SR , STM_ROLE SC
				WHERE SR.ROLE_CODE = SC.ROLE_CODE
				AND SR.USER_ID = A.USER_ID
				ORDER BY SR.ROLE_CODE
				FOR XML PATH('')), 1, 2, '') AS VARCHAR(1000)) 
                   ) ROLE_NM
          FROM STM_USERS A, MHS_EMP B ,MHS_DEPT C
          WHERE A.EMPNO =B.EMPNO
          AND B.DEPT_CODE =C.DEPT_CODE
          AND B.BPLC_CODE =C.BPLC_CODE
               
           <if test="userNm != null and userNm != ''">
              AND A.USER_NM like '%' || #{userNm} || '%'
           </if>
           <if test="userId != null and userId != ''">
              AND A.USER_ID like '%' || #{userId} || '%'
           </if>
             
      ORDER BY USER_ID
      
    </select>

    <select id="selectMenu" parameterType="egovMapForNull" resultType="egovMapForNull">
        /* kr.co.dbvision.api.stm.mng.stmmng006.service.impl.Stmmng006Mapper.selectMenu */
        WITH  MENU_MGR AS  (
        SELECT UPPER_MENU_ID AS UPPER_MENU_ID,
               MENU_ID, 
               MENU_NM, 
               MENU_SE, 
               ORDR, 
               PROGRM_ID,
               REG_DT, 
               REG_ID, 
               UPT_DT, 
               UPT_ID,
               1 LEVEL ,  
               CONVERT(VARCHAR(255), REPLICATE('0',5-LEN(CONVERT(varchar(10), ORDR))) + CONVERT(varchar(10), ORDR)) AS MENU_LEVEL
          FROM STM_MENU A
         WHERE MENU_USE_AT = '1'
         AND   MENU_ID = 'CHF000000'
         UNION ALL
         SELECT MM.UPPER_MENU_ID AS UPPER_MENU_ID,
               MM.MENU_ID, 
               MM.MENU_NM, 
               MM.MENU_SE, 
               MM.ORDR,
               MM.PROGRM_ID,
               MM.REG_DT, 
               MM.REG_ID, 
               MM.UPT_DT, 
               MM.UPT_ID,
               (MMGR.LEVEL + 1) AS LEVEL ,
               CONVERT(varchar(255), (CONVERT(varchar(255) ,MMGR.MENU_LEVEL) +convert(varchar(255) ,LEVEL) + CONVERT(varchar(255), REPLICATE('0',5-LEN(CONVERT(varchar(10), MM.ORDR))) + CONVERT(varchar(10), MM.ORDR)) )) AS MENU_LEVEL
          FROM STM_MENU  AS MM
          INNER JOIN MENU_MGR MMGR 
          ON MM.UPPER_MENU_ID = MMGR.MENU_ID
          AND MENU_USE_AT = '1'
         ) 
         SELECT ISNULL(UPPER_MENU_ID,'ROOT') UPPER_MENU_ID,
               MENU_ID, 
               MENU_NM, 
               MENU_SE, 
               ORDR,
               (SELECT PCKAGE_NM FROM STM_PROGRM WHERE PROGRM_ID = MENU_MGR.MENU_ID) AS PCKAGE_NM,
               (SELECT SUB_PCKAGE_ID FROM STM_PROGRM WHERE PROGRM_ID = MENU_MGR.MENU_ID) AS SUB_PCKAGE_ID,
               PROGRM_ID,
               REG_DT, 
               REG_ID, 
               UPT_DT, 
               UPT_ID,
               (SELECT USER_NM FROM STM_USERS WHERE USER_ID = MENU_MGR.REG_ID) REG_NM,
               (SELECT USER_NM FROM STM_USERS WHERE USER_ID = MENU_MGR.UPT_ID) UPT_NM
         FROM MENU_MGR 
         ORDER BY MENU_LEVEL
    </select>

    <select id="selectUserMenu" parameterType="egovMapForNull" resultType="egovMapForNull">
        /* kr.co.dbvision.api.stm.mng.stmmng006.service.impl.Stmmng006Mapper.selectUserMenu */
        WITH  MENU_MGR AS  (
        SELECT UPPER_MENU_ID AS UPPER_MENU_ID,
               MENU_ID, 
               MENU_NM, 
               MENU_SE, 
               ORDR, 
               PROGRM_ID,
               REG_DT, 
               REG_ID, 
               UPT_DT, 
               UPT_ID,
               1 LEVEL ,  
               CONVERT(VARCHAR(255), REPLICATE('0',5-LEN(CONVERT(varchar(10), ORDR))) + CONVERT(varchar(10), ORDR)) AS MENU_LEVEL
          FROM STM_MENU A
         WHERE MENU_USE_AT = '1'
         AND   MENU_ID = 'CHF000000'
         UNION ALL
         SELECT MM.UPPER_MENU_ID AS UPPER_MENU_ID,
               MM.MENU_ID, 
               MM.MENU_NM, 
               MM.MENU_SE, 
               MM.ORDR,
               MM.PROGRM_ID,
               MM.REG_DT, 
               MM.REG_ID, 
               MM.UPT_DT, 
               MM.UPT_ID,
               (MMGR.LEVEL + 1) AS LEVEL ,
               CONVERT(varchar(255), (CONVERT(varchar(255) ,MMGR.MENU_LEVEL) +convert(varchar(255) ,LEVEL) + CONVERT(varchar(255), REPLICATE('0',5-LEN(CONVERT(varchar(10), MM.ORDR))) + CONVERT(varchar(10), MM.ORDR)) )) AS MENU_LEVEL
          FROM STM_MENU  AS MM
          INNER JOIN MENU_MGR MMGR 
          ON MM.UPPER_MENU_ID = MMGR.MENU_ID
          AND MENU_USE_AT = '1'
         ) 
         SELECT ISNULL(UPPER_MENU_ID,'ROOT') UPPER_MENU_ID,
               MENU_ID, 
               MENU_NM, 
               MENU_SE, 
               ORDR,
               (SELECT PCKAGE_NM FROM STM_PROGRM WHERE PROGRM_ID = MENU_MGR.MENU_ID) AS PCKAGE_NM,
               (SELECT SUB_PCKAGE_ID FROM STM_PROGRM WHERE PROGRM_ID = MENU_MGR.MENU_ID) AS SUB_PCKAGE_ID,
               PROGRM_ID,
               #{userId} USER_ID,
               ISNULL((SELECT TOP 1 USER_NM FROM STM_USERS WHERE USER_ID = #{userId}),'0') AS USER_NM,  
               ISNULL((SELECT INQIRE_AUTHOR_AT FROM STM_USERMENU WHERE USER_ID = #{userId} AND MENU_ID = MENU_MGR.MENU_ID),'0') AS INQIRE_AUTHOR_AT,
               ISNULL((SELECT REGIST_AUTHOR_AT FROM STM_USERMENU WHERE USER_ID = #{userId} AND MENU_ID = MENU_MGR.MENU_ID),'0') AS REGIST_AUTHOR_AT,
               ISNULL((SELECT UPDT_AUTHOR_AT FROM STM_USERMENU WHERE USER_ID = #{userId} AND MENU_ID = MENU_MGR.MENU_ID),'0') AS UPDT_AUTHOR_AT,
               ISNULL((SELECT DELETE_AUTHOR_AT FROM STM_USERMENU WHERE USER_ID = #{userId} AND MENU_ID = MENU_MGR.MENU_ID),'0') AS DELETE_AUTHOR_AT,
               ISNULL((SELECT PRNTNG_AUTHOR_AT FROM STM_USERMENU WHERE USER_ID = #{userId} AND MENU_ID = MENU_MGR.MENU_ID),'0') AS PRNTNG_AUTHOR_AT,
               ISNULL((SELECT EXCEL_AUTHOR_AT FROM STM_USERMENU WHERE USER_ID = #{userId} AND MENU_ID = MENU_MGR.MENU_ID),'0') AS EXCEL_AUTHOR_AT,
               ISNULL((SELECT DATA_AUTHOR_SE FROM STM_USERMENU WHERE USER_ID = #{userId} AND MENU_ID = MENU_MGR.MENU_ID),'0') AS DATA_AUTHOR_SE,
               (CASE WHEN (SELECT DELETE_AT FROM STM_USERMENU WHERE USER_ID = #{userId} AND MENU_ID = MENU_MGR.MENU_ID) ='0' THEN '1' ELSE '0' END)  AS MENU_AT,
               REG_DT, 
               REG_ID, 
               UPT_DT, 
               UPT_ID,
               (SELECT USER_NM FROM STM_USERS WHERE USER_ID = MENU_MGR.REG_ID) REG_NM,
               (SELECT USER_NM FROM STM_USERS WHERE USER_ID = MENU_MGR.UPT_ID) UPT_NM
         FROM MENU_MGR 
         WHERE MENU_MGR.MENU_ID != 'CHF000000'
         ORDER BY MENU_LEVEL
    </select>

    <select id="selectUserMenuOnly" parameterType="egovMapForNull" resultType="egovMapForNull">
        /* kr.co.dbvision.api.stm.mng.stmmng006.service.impl.Stmmng006Mapper.selectUserMenuOnly */
        SELECT MENU_ID
          FROM STM_USERMENU A
         WHERE USER_ID = #{userId}
    </select>

    <select id="selectUserMenuDetail" parameterType="egovMapForNull" resultType="egovMapForNull">
        /* kr.co.dbvision.api.stm.mng.stmmng006.service.impl.Stmmng006Mapper.selectUserMenuDetail */
        SELECT USER_ID,
               (SELECT TOP 1 USER_NM FROM STM_USERS WHERE USER_ID = #{userId}) AS USER_NM,
               MENU_ID,
               INQIRE_AUTHOR_AT,
               REGIST_AUTHOR_AT,
               UPDT_AUTHOR_AT,
               DELETE_AUTHOR_AT,
               PRNTNG_AUTHOR_AT,
               EXCEL_AUTHOR_AT,
               DATA_AUTHOR_SE,
               REG_DT,
               REG_ID,
               UPT_DT,
               UPT_ID,
               (SELECT USER_NM FROM STM_USERS WHERE USER_ID = A.REG_ID) AS REG_NM,
               (SELECT USER_NM FROM STM_USERS WHERE USER_ID = A.UPT_ID) AS UPT_NM
          FROM STM_USERMENU A
         WHERE USER_ID = #{userId}
           AND MENU_ID = #{menuId}
    </select>

    <insert id="insertUserMenu" parameterType="EgovMapForNull">
        /* kr.co.dbvision.api.stm.mng.stmmng006.service.impl.Stmmng006Mapper.insertUserMenu */
        INSERT INTO STM_USERMENU (
               USER_ID,
               MENU_ID,
               INQIRE_AUTHOR_AT,
               REGIST_AUTHOR_AT,
               UPDT_AUTHOR_AT,
               DELETE_AUTHOR_AT,
               PRNTNG_AUTHOR_AT,
               EXCEL_AUTHOR_AT,
               DATA_AUTHOR_SE,
               DELETE_AT,
               REG_DT,
               REG_ID
        ) VALUES (
                #{userId}
               ,#{menuId}
               ,#{inqireAuthorAt}
               ,#{registAuthorAt}
               ,#{updtAuthorAt}
               ,#{deleteAuthorAt}
               ,#{prntngAuthorAt}
               ,#{excelAuthorAt}
               ,#{dataAuthorSe}
               ,#{deleteAt}
               ,GETDATE()
               ,#{regId}
        )
    </insert>

    <update id="updateUserMenu" parameterType="EgovMapForNull">
       /* kr.co.dbvision.api.stm.mng.stmmng006.service.impl.Stmmng006Mapper.updateUserMenu */
       MERGE INTO STM_USERMENU A USING (SELECT #{userId} USER_ID, #{menuId} MENU_ID FROM DUAL) B 
          ON (A.USER_ID = B.USER_ID AND A.MENU_ID = B.MENU_ID)
        WHEN MATCHED THEN
	        UPDATE SET
	               INQIRE_AUTHOR_AT = #{inqireAuthorAt},
	               REGIST_AUTHOR_AT = #{registAuthorAt},
	               UPDT_AUTHOR_AT = #{updtAuthorAt},
	               DELETE_AUTHOR_AT = #{deleteAuthorAt},
	               PRNTNG_AUTHOR_AT = #{prntngAuthorAt},
	               EXCEL_AUTHOR_AT = #{excelAuthorAt},
	               DATA_AUTHOR_SE = #{dataAuthorSe},
	               DELETE_AT = '0',
	               UPT_DT = GETDATE(),
	               UPT_ID = #{uptId}
        WHEN NOT MATCHED THEN                
	        INSERT (
	               USER_ID,
	               MENU_ID,
	               INQIRE_AUTHOR_AT,
	               REGIST_AUTHOR_AT,
	               UPDT_AUTHOR_AT,
	               DELETE_AUTHOR_AT,
	               PRNTNG_AUTHOR_AT,
	               EXCEL_AUTHOR_AT,
	               DATA_AUTHOR_SE,
	               DELETE_AT,
	               REG_DT,
	               REG_ID
	        ) VALUES (
	                #{userId}
	               ,#{menuId}
	               ,#{inqireAuthorAt}
	               ,#{registAuthorAt}
	               ,#{updtAuthorAt}
	               ,#{deleteAuthorAt}
	               ,#{prntngAuthorAt}
	               ,#{excelAuthorAt}
	               ,#{dataAuthorSe}
	               ,'0'
	               ,GETDATE()
	               ,#{regId}
	        )
    </update>

    <delete id="deleteUserMenu" parameterType="EgovMapForNull">
        /* kr.co.dbvision.api.stm.mng.stmmng006.service.impl.Stmmng006Mapper.deleteUserMenu */
        DELETE FROM STM_USERMENU 
         WHERE USER_ID = #{userId}         
           AND MENU_ID = #{menuId}       	 
    </delete>
    
    <delete id="deleteUserMenuAll" parameterType="EgovMapForNull">
        /* kr.co.dbvision.api.stm.mng.stmmng006.service.impl.Stmmng006Mapper.deleteUserMenuAll */
        DELETE FROM STM_USERMENU
         WHERE USER_ID = #{userId}          
    </delete>

</mapper>
